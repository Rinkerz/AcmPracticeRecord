#include<iostream>
#include<cmath>
#include<algorithm>

using namespace std;

typedef struct range{
    float l,r;
}range;

bool cmp(range p1,range p2)
{
    return p1.l<p2.l;
}


float dis(range p1,range p2)
{
    return sqrt((p1.l-p2.l)*(p1.l-p2.l)+(p1.r-p2.r)*(p1.r-p2.r));
}

int main()
{
    float n,d,x,y;
    range ran[1000];
    int cases=0;
    int rds=0;
    while(1)
    {
        rds=0;
        cases++;
        cin>>n>>d;
        if(n==0&&d==0)
            break;

        if(d<0) rds=-1;

        for(int i=0;i!=n;i++)
        {
            cin>>x>>y;
            if(y>d)  rds=-1;
            ran[i].l=x-sqrt(d*d-y*y);
            ran[i].r=x+sqrt(d*d-y*y);
        }
        if(rds==-1) {cout<<"Case "<<cases<<": "<<rds<<endl;continue;}


        sort(ran,ran+(int)n,cmp);

        rds=1;
        float temp=ran[0].r;
        for(int i=1;i<n;i++)			//这一段用了贪心算法
        {
             if(ran[i].r<temp)
             {
                 temp=ran[i].r;
             }
             else if(ran[i].l>temp)
             {
                 rds++;
                 temp=ran[i].r;
             }
        }

        cout<<"Case "<<cases<<": "<<rds<<endl;
    }
}


/*
下面的解法是错误的,求出的不是最优解，作为警醒记录下来。
WA的原因是算法的错误，选择最左边的未被覆盖的点然后让覆盖它的那个圆尽可能向右移（这样可能覆盖更多的点），这个算法是错的。
考虑下面这个数据就知道这个算法是错的了：
2 3
0 2
1 3
正确结果是1，这个算法输出2。
*/
#include<iostream>
#include<cmath>
#include<algorithm>

using namespace std;

typedef struct position{
    float x,y;
}position;

bool cmp(position p1,position p2)
{	
    return p1.x<p2.x;
}


float dis(position p1,position p2)
{
    return sqrt((p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y));
}

int main()
{
    float n,d;
    position pos[1000];
    int cases=0;
    int rds;
    while(1)
    {
        rds=0;
        cases++;
        cin>>n>>d;
        if(n==0&&d==0)
            break;

        for(int i=0;i!=n;i++)
        {
            cin>>pos[i].x>>pos[i].y;
            if(pos[i].y>d)  {rds=-1;break;}
        }
        if(rds==-1) {cout<<"Case "<<cases<<": "<<rds<<endl;continue;}


        sort(pos,pos+(int)n,cmp);


        int i=0;position cen;
        while(1)
        {
            rds++;
            cen.x=pos[i].x+sqrt(d*d-pos[i].y*pos[i].y);cen.y=0;
            while(dis(pos[i],cen)<=d) {i++;if(i==n) break;}
            if(i==n) break;
        }

        cout<<"Case "<<cases<<": "<<rds<<endl;
    }
}

