//DFS遍历之，需要先判断一下能不能到终点，否则会超时，此处用了Floyd判断。
#include<iostream>
#include<fstream>
#include<cstdio>
#include<cstring>
#include<cmath>
#include<vector>
#include<algorithm>
using namespace std;
#define MAXN 25
#define mem(x) memset(x,0,sizeof(x))


//fstream fstr("/home/rinker/Desktop/new file");
int G[MAXN][MAXN];
int vis[MAXN];int ans[MAXN];
int top,ter,cnt;
int d[MAXN];

void print_ans(int n)
{   //cout<<n<<"&"<<ans[n]<<"&"<<ter<<endl;
    if(ans[n]==ter)    {for(int i=1;i<n;i++) cout<<ans[i]<<" ";cout<<ans[n];cout<<endl;cnt++;vis[ter]=0;return;}
    vis[ans[n]]=1;
    for(int i=1;i<=top;i++)
    {//cout<<ans[n]<<i<<":"<<G[ans[n]][i]<<(vis[i]!=-1)<<":"<<n<<endl;
        if(G[ans[n]][i]&&!vis[i]) {ans[n+1]=i;print_ans(n+1);}
    }
    vis[ans[n]]=0;
    if(n==1) cout<<"There are "<<cnt<<" routes from the firestation to streetcorner "<<ter<<".\n";
}

int main()
{
    int kase=1;
    while(cin>>ter)
    {
        cout<<"CASE "<<kase++<<":"<<endl;
        mem(G);mem(vis);mem(ans);mem(d);top=0;cnt=0;
        int x,y;
        while(cin>>x>>y&&x|y)
        {
            G[x][y]=G[y][x]=1;
            top=max(top,max(x,y));
        }
        for(int i=1;i<=top;i++)
            for(int j=1;j<=top;j++)
                for(int k=1;k<=top;k++)
                    if(G[j][k]&&!d[k]) d[k]=d[j]+1;
        ans[1]=1;
        if(d[ter])    print_ans(1);
        else cout<<"There are 0 routes from the firestation to streetcorner "<<ter<<".\n";
    }
    return 0;
}

int G[MAXN][MAXN];
int vis[MAXN];int ans[MAXN];
int top,ter,cnt;
int d[MAXN];

void print_ans(int n)
{   //cout<<n<<"&"<<ans[n]<<"&"<<ter<<endl;
    if(ans[n]==ter)    {for(int i=1;i<=n;i++) cout<<" "<<ans[i];cout<<endl;cnt++;vis[ter]=0;return;}
    vis[ans[n]]=1;
    for(int i=1;i<=top;i++)
    {//cout<<ans[n]<<i<<":"<<G[ans[n]][i]<<(vis[i]!=-1)<<":"<<n<<endl;
        if(G[ans[n]][i]&&!vis[i]) {ans[n+1]=i;print_ans(n+1);}
    }
    vis[ans[n]]=0;
    if(n==1) cout<<"There are "<<cnt<<" routes from the firestation to streetcorner "<<ter<<".\n";
}

int main()
{
    int kase=1;
    while(fstr>>ter)
    {
        cout<<"CASE "<<kase++<<":"<<endl;
        mem(G);mem(vis);mem(ans);mem(d);top=0;cnt=0;
        int x,y;
        while(fstr>>x>>y&&x|y)
        {
            G[x][y]=G[y][x]=1;
            top=max(top,max(x,y));
        }
        for(int i=1;i<=top;i++)
            for(int j=1;j<=top;j++)
                for(int k=1;k<=top;k++)
                    if(G[j][k]&&!d[k]) d[k]=d[j]+1;
        ans[1]=1;
        if(d[ter])    print_ans(1);
        else cout<<"There are 0 routes from the firestation to streetcorner "<<ter<<".\n";
    }
    return 0;
}

