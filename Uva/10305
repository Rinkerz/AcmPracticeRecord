//两件事重复一下。。每个案例前请重置所有全局变量。。
//以及提交前请删除debug输出。。。
//新知识点是，DFS时可以用三种状态标记每个点，访问过的，未访问的，本次递归的上层，第三个用来检查是否成环。
#include<iostream>
#include<fstream>
#include<cstdio>
#include<cstring>
#include<cmath>
#include<algorithm>
using namespace std;
#define mem(x,y) memset(x,y,sizeof(x))
//fstream fstr("/home/rinker/Desktop/new file");
const int maxn=110;
int edge[maxn][maxn];
int c[maxn],topo[maxn];
int n,m;int t;

bool dfs(int u)
{
    c[u]=-1;//cout<<"b"<<t<<" "<<u<<endl;
    for(int i=1;i<=n;i++)
        if(edge[u][i]){
            if(c[i]==-1) return false;
            else if(!c[i]&&!dfs(i)) return false;
        }

    c[u]=1;topo[t--]=u;return true;
}

bool toposort()
{
    t=n;
    mem(c,0);mem(topo,0);
    for(int i=1;i<=n;i++)
        if(!c[i]) if(!dfs(i)) return false;
    return true;
}

int main()
{
    int x,y;
    while(scanf("%d %d",&n,&m)&&n|m)
    {
        mem(edge,0);
        for(int i=0;i!=m;i++)
        {
            cin>>x>>y;
            edge[x][y]=1;
        }
        toposort();//cout<<"s"<<topo[3];
        for(int i=1;i!=n;i++)
            cout<<topo[i]<<" ";
        cout<<topo[n]<<endl;
    }
    return 0;
}

